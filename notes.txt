Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM  (1 Hour)
    Tea Break   : 3:30 PM (20 mins)
    Windup      : 5:30 PM

Methodology:
    NO powerpoint
    100% Hands on driven
    Atleast 50% of the participants should have completed the assignments for us to move forward.

Software Requirements
    1. Node.js (LTS)
    2. Visual Studio Code
    3. Chrome Browser

About You
    Name
    Experience
    Primary Skillset
    Experience in Angular (if any)

What is Angular?

Salary Calculator
    salary = basic + hra + da - tax(%)

    Assumptions:
        1. 100% matches the functional Requirements
            i.e., NO validations are required
        2. Preparing the app for deployment is taken care by another team
            i.e., refactoring the JS & CSS to their respective files
                  minifying and uglifying the JS & CSS files

Reactive X Proactive

Angular Building Blocks
    1. Module
        Registry of application entities (components, directives, pipes, services, etc.)
        Dependency Injection
        There has to be a minimum of 1 module in an angular application
        Application initialization happens in the main module

    2. Component
        Represents one of the UI responsibilities
        Encapsulation of Presentation & UI Behavior (user actions)
        Application UI = composition of components

    3. Directive
        Encapsulation of DOM manipulation logic
        Directive = Component - Template

    4. Pipe
        Encapsulation of Data Transformation logic for presentation
        
    5. Service
        NON UI responsibilities


Angular cli
    Installation - 
        [sudo] npm install -g @angular/cli

To Create a new application
    ng new <app-name>
    

ES6 (ES2015)
    1. let
    2. const
    3. Array destructuring
    4. Rest operator (array)
    5. Spread operator (array)
    6. Object destructuring
    7. Rest operator (Object)
    8. Spread operator (Object)
    9. default parameters
    10. arrow functions
    11. template strings
    12. iterables (for of)
    13. classes
    14. modules

    For other features => http://es6-features.org

TypeScript
    JavaScript + TypeSafety


var x : number = 10

function add(x : number,y : number) : number {
    return x + y;
}

add('abc','xyz')
var result : string = add(10,20)

    |
    |
    V
typescript compiler
    |
    |
    V
var x  = 10

function add(x ,y )  {
    return x + y;
}

1. Access modifiers
    public
    private
    protected
2. Enum
3. Interfaces
4. Generics
5. Decorators

http://www.typescriptlang.org


JavaScript Module Systems
    AMD (Asynchronous Module Definition)
    CommonJS (CommonJS Module System)


    ES6 Modules
        Anything defined in a file (js/ts) is considered 'private' by default
        If any entity has to be accessed publicly, then it has to be explicitly exported
        If any public entity from another file has to be used, then it has to be imported explicitly


Angular Decorator
    NgModule
    Component
    Pipe
    Directive

    Injectable
    Inject
    Input
    Output

To create a component
    ng generate component <component_name>
    OR
    ng g c <component_name>

Directive
    Attribute Directive
        Manipulate the attributes of existing DOM elements
        Doesnt change the structure of the DOM tree
        Syntax = [<directive_name>]

    Structural Directive
        Manipulate the structure of the DOM tree (by adding new dom nodes or removing existing dom nodes)
        Syntax = *<directive_name>


Books
    Agile Principles Patterns & Practices
    Head First Design Patterns
    Refactoring
    Refactoring to Patterns
    Growing Object-Oriented software guided by tests

SOLID
    SRP - Single Responsibility Principle
    OCP - Open Closed Principle
    LSP - Liskov's Substitution Principle
    ISP - Interface Seggregation Princile
    DIP - Dependency Inversion Principle

Dependencies should NOT be 'created' and 'used' in the same entitiy

Creating a new pipe
    ng g p bugs/pipes/trim-text

window.localStorage
===================
    * key/value store
    * key has to be unique
    * key & value must be strings 
        Use JSON.stringify() & JSON.parse() for serialization and deserialization
    * ~10 MB storage limit
    * security is taken care by Same Origin Policy
    * APIS
        - setItem(key,value)
        - getItem(key) => value
        - removeItem(key)
        - key(index) => key @ index
        - clear()
        - length => # of items in the storage

To Study
    Array Methods
        - filter()
        - map()
        - reduce()
        - forEach()

to use moment.js
    npm install moment
    import * as moment from 'moment'
    moment('2022-02-17T05:48:34.496Z').fromNow()

Pure Functions
    A function with no side effects
    If the invocation of the function can be replaced with the result of invocation without affecting the final outcome

    If a function depends ONLY on the given input & doesnt communicate to other resources (db, console, http, fs etc)
        then it is a pure function

    Adv:
        memoization
            ability to remember and reuse the result of a function

Server Communication
    Server?
        json-server

    Communication
        Asynchronous

    Asynchronous Operation
        Will complete sometime in future
        Client will not wait for the operation to complete

        1. Using Callbacks
        2. Using promises
        3. Using Async Await

Observable
    Inverse of Enumberable (lazy evaluation)


Observable = collection that will get the data in "future"
    STREAM OF EVENTS

Event Driven Applications
    The sequence of execution is determined by "external" events

employee.dat
    id,name,doj,dob,salary,city

Write a program to calculate the average salary of the employees

    open the file

    while !eof{
        read the line
        split the line
        parse the line
        sum = sum + salary
        count = count + 1
    }

    avg = sum / count

    close file

    return avg

Mouse is the database


Rx.NET

Sources of Async Operations
    1. User Events (stream)
    2. Timers (setInterval) (stream)
    3. Ajax (singular)
    4. Server sent events (stream)
    5. Web sockets (stream)


Server Communication in Angular
    Module -> HttpClientModule from @angular/common/http 
    Service -> HttpClient


    HTTP Operations
        Get all bugs
            const bugs$ = this.http.get<Bug[]>('http://localhost:3000/bugs');
            bugs$.subscribe(bugs => console.table(bugs));

        Get One bug by id
            const bug$ = this.http.get<Bug>('http://localhost:3000/bugs/<id>');
            bugs$.subscribe(bug => console.log(bug));

        Create a new bug
            const newBug$ = this.http.post<Bug>('http://localhost:3000/bugs', {
                name: 'New Bug',
                isClosed: false
            });
            newBug$.subscribe(bug => console.log(bug));

        Update a bug
            const updatedBug$ = this.http.put<Bug>('http://localhost:3000/bugs/<id>', {
                name: 'Updated Bug',
                isClosed: true
            });
            updatedBug$.subscribe(bug => console.log(bug));

        Delete a bug
            const deletedBug$ = this.http.delete<void>('http://localhost:3000/bugs/<id>');
            deletedBug$.subscribe(_ => console.log('done'));

Routing
    https://www.amazon.in
    https://www.amazon.in/electronics
    https://www.amazon.in/electronics/mobile
    https://www.amazon.in/electronics/mobile/google
    https://www.amazon.in/electronics/mobile/google/pixel-6

    https://www.amazon.in/electronics/mobile/google/pixel-6/reviews

    Outlook
    Outlook/Inbox
    Outlook/Inbox/Projects
    Outlook/Inbox/Projects/Eclipse
    Outlook/Inbox/Projects/Eclipse/bugs

    Outlook/Inbox/Projects/Eclipse/bugs/bug-101


angular 1, router 2
angular 2, router 3
angular 4, router 4

localhost:4200 => bugsComponent
localhost:4200/bugs => bugsComponent
localhost:4200/create => newBugComponent
localhost:4200/bug/<id> => bugInfoComponent
